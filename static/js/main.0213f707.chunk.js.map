{"version":3,"sources":["components/AsideContainer/Histories.tsx","components/AsideContainer/AsideContainer.tsx","stores/requestMethod/index.ts","components/FormContainer/RequestContainer/styles.ts","components/FormContainer/RequestContainer/RequestAddress.tsx","reset.style.ts","components/FormContainer/RequestContainer/RequestConfig.tsx","components/FormContainer/RequestContainer/RequestContainer.tsx","components/FormContainer/FormContainer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["titleStyle","css","Histories","AsideContainer","className","methods","methodState","atom","key","default","addressStyle","commonInputStyle","selectStyle","addressInputStyle","buttonStyle","tabStyle","RequestAddress","useRecoilState","method","setMethod","useState","setRequestURL","submitRequest","value","onChange","target","map","v","type","onInput","onKeyDown","keyCode","onClick","listResetStyle","paragraphResetStyle","allResetStyle","tabs","RequestConfig","activeTab","setActiveTab","tabName","RequestContainer","FormContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iaAIA,IAAMA,EAAaC,YAAH,KAQHC,EAAsB,kBACjC,2BACE,kBAAID,IAAKD,GAAT,aCXSG,EAA2B,kBACtC,2BAAOC,UAAU,kBACf,kBAAC,EAAD,Q,cCHSC,EAAoB,CAAE,MAAO,OAAQ,MAAO,QAAS,UAErDC,EAAmCC,eAAK,CACnDC,IAAK,cACLC,QAASJ,EAAQ,K,u5DCJZ,IAAMK,EAAeT,YAAH,KAMnBU,EAAmBV,YAAH,KAgBTW,EAAcX,YAAH,IACpBU,GAKSE,EAAoBZ,YAAH,IAC1BU,GAMSG,EAAcb,YAAH,KAkBXc,EAAWd,YAAH,KChDRe,EAA2B,WAAO,IAAD,EAEdC,yBAAeX,GAFD,mBAEpCY,EAFoC,KAE5BC,EAF4B,OAGNC,mBAAS,IAHH,mBAGxBC,GAHwB,WAmBtCC,EAAiB,aAIvB,OACE,mBAAKrB,IAAKS,GACR,sBACEa,MAAOL,EACPM,SAtBe,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OACtBN,EAAUM,EAAOF,QAsBbtB,IAAKW,GAEHP,EAAQqB,KAAI,SAACC,EAAGnB,GAAJ,OACZ,sBAAQe,MAAOI,EAAGnB,IAAKA,GAAMmB,OAIjC,qBACEC,KAAK,OACL3B,IAAKY,EACLgB,QA7BY,SAAC,GAAqD,IAAnDJ,EAAkD,EAAlDA,OACnBJ,EAAcI,EAAOF,QA6BjBO,UA1BgB,SAAC,GACL,KAD4D,EAArDC,SAErBT,OA2BA,sBACEM,KAAK,SACL3B,IAAKa,EACLkB,QAASV,GAHX,U,yVC/CC,IAAMW,EAAiBhC,YAAH,KAQdiC,EAAsBjC,YAAH,KAOnBkC,EAAgBlC,YAAH,IACtBgC,EACAC,GCbEE,EAAO,CAAC,SAAU,UAAW,QAEtBC,EAA0B,WAAO,IAAD,EAETjB,mBAAS,GAFA,mBAEpCkB,EAFoC,KAEzBC,EAFyB,KAI3C,OACE,mBAAKtC,IAAKkC,GACR,kBAAIlC,IAAKc,GACNqB,EAAKV,KAAI,SAACc,EAAShC,GAAV,OACR,kBACEA,IAAKA,EACLJ,UAAWI,IAAQ8B,EAAY,SAAW,GAC1CN,QAAS,kBAAMO,EAAa/B,KAE3BgC,S,gJCfb,IAAMxC,EAAaC,YAAH,KAOHwC,EAA6B,kBACxC,2BACE,kBAAIxC,IAAKD,GAAT,WACA,YAAC,EAAD,MACA,YAAC,EAAD,QCdS0C,EAA0B,kBACrC,6BAAStC,UAAU,iBACjB,kBAAC,EAAD,QCDSuC,EAAgB,kBAC3B,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKgBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0213f707.chunk.js","sourcesContent":["/** @jsx jsx */\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\n\nconst titleStyle = css`\n  border-bottom: 2px solid #06F;\n  padding: 15px;\n  margin: 0;\n  font-size: 21px;\n  font-weight: 400;\n`;\n\nexport const Histories: React.FC = () => (\n  <section>\n    <h2 css={titleStyle}>History</h2>\n  </section>\n);","import React from \"react\";\nimport { Histories } from \"./Histories\";\n\nexport const AsideContainer: React.FC = () => (\n  <aside className=\"asideContainer\">\n    <Histories />\n  </aside>\n);","import {atom, RecoilState} from \"recoil\";\n\nexport const methods: string[] = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];\n\nexport const methodState: RecoilState<string> = atom({\n  key: 'methodState',\n  default: methods[0]\n});","import { css } from \"@emotion/core\";\n\nexport const addressStyle = css`\n  padding: 10px;\n  border-bottom: 1px solid #ddd;\n  display: flex;\n`;\n\nconst commonInputStyle = css`\n  border: 1px solid #bbb;\n  background: #f5f5f5;\n  border-radius: 2px;\n  font-size: 13px;\n  height: 36px;\n  padding: 0 10px;\n  box-sizing: border-box;\n  transition: background-color 0.15s;\n  \n  &:focus {\n    background: #fff;\n    outline: none;\n  }\n`;\n\nexport const selectStyle = css`\n  ${commonInputStyle}\n  border-radius: 3px 0 0 3px;\n  width: 100px;\n`;\n\nexport const addressInputStyle = css`\n  ${commonInputStyle}\n  border-radius: 0 3px 3px 0;\n  margin-left: -1px;\n  width: calc(100% - 190px);\n`;\n\nexport const buttonStyle = css`\n  margin-left: 5px;\n  width: 85px;\n  border: none;\n  background: #09F;\n  color: #fff;\n  font-weight: bold;\n  height: 36px;\n  padding: 0 10px;\n  box-sizing: border-box;\n  border-radius: 2px;\n  transition: background-color 0.15s;\n  \n  &:hover {\n    background: #06F;\n  }\n`;\n\nexport const tabStyle = css`\n  && {\n    display: flex;\n    border-bottom: 1px dotted #ddd;\n    padding: 0 10px;\n    \n    li {\n      padding: 15px 10px;\n      position: relative;\n      color: #aaa;\n      font-size: 13px;\n      cursor: pointer;\n      transition: color 0.3s;\n      \n      &::after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        left: 50%;\n        right: 50%;\n        height: 3px;\n        background: #06F;\n        bottom: -1px;\n        transition-property: left, right;\n        transition-duration: 0.3s;\n      }\n      \n      &:hover {\n        color: #000;\n      }\n      \n      &.active {\n        color: #000;\n        &::after {\n          left: 0;\n          right: 0;\n        }\n      }\n    }\n  }\n`;","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React, {useState} from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { methodState, methods } from \"../../../stores/requestMethod\";\nimport { selectStyle, addressInputStyle, addressStyle, buttonStyle } from \"./styles\";\n\nexport const RequestAddress: React.FC = () => {\n\n  const [ method, setMethod ] = useRecoilState(methodState);\n  const [ requestURL, setRequestURL ] = useState('');\n\n  const changeMethod = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMethod(target.value);\n  }\n\n  const updateUrl = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    setRequestURL(target.value);\n  }\n\n  const submitOnEnter = ({ keyCode }: React.KeyboardEvent<HTMLInputElement>) => {\n    if (keyCode === 13) {\n      submitRequest();\n    }\n  }\n\n  const submitRequest  = () => {\n\n  }\n\n  return (\n    <div css={addressStyle}>\n      <select\n        value={method}\n        onChange={changeMethod}\n        css={selectStyle}\n      >\n        { methods.map((v, key) =>\n          <option value={v} key={key}>{v}</option>)\n        }\n      </select>\n\n      <input\n        type=\"text\"\n        css={addressInputStyle}\n        onInput={updateUrl}\n        onKeyDown={submitOnEnter}\n      />\n\n      <button\n        type=\"button\"\n        css={buttonStyle}\n        onClick={submitRequest}\n      >\n        Send\n      </button>\n    </div>\n  );\n}","import { css } from \"@emotion/core\";\n\nexport const listResetStyle = css`\n  ul, li {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const paragraphResetStyle = css`\n  p {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const allResetStyle = css`\n  ${listResetStyle}\n  ${paragraphResetStyle}\n`;","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport React, {useState} from \"react\";\nimport { allResetStyle } from \"../../../reset.style\";\nimport { tabStyle } from \"./styles\";\n\nconst tabs = ['Params', 'Headers', 'Body'];\n\nexport const RequestConfig: React.FC = () => {\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  return (\n    <div css={allResetStyle}>\n      <ul css={tabStyle}>\n        {tabs.map((tabName, key) =>\n          <li\n            key={key}\n            className={key === activeTab ? 'active' : ''}\n            onClick={() => setActiveTab(key)}\n          >\n            {tabName}\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n","/** @jsx jsx **/\nimport { css, jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport { RequestAddress } from \"./RequestAddress\";\nimport { RequestConfig } from \"./RequestConfig\";\n\nconst titleStyle = css`\n  font-size: 21px;\n  margin: 0;\n  padding: 15px;\n  font-weight: 400;\n`;\n\nexport const RequestContainer: React.FC = () => (\n  <section>\n    <h3 css={titleStyle}>Request</h3>\n    <RequestAddress />\n    <RequestConfig />\n  </section>\n);","import React from \"react\";\nimport {RequestContainer} from \"./RequestContainer\";\n\nexport const FormContainer: React.FC = () => (\n  <section className=\"formContainer\">\n    <RequestContainer />\n  </section>\n);","import React from 'react';\nimport { AsideContainer } from '../AsideContainer';\nimport { FormContainer } from '../FormContainer';\n\nexport const App: React.FC = () => (\n  <div className=\"App\">\n    <AsideContainer />\n    <FormContainer />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport { RecoilRoot } from \"recoil\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <RecoilRoot>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}