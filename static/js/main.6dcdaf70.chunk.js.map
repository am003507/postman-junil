{"version":3,"sources":["stores/requestMethod/index.ts","components/RequestContainer/styles.ts","components/RequestContainer/Address.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["methods","methodState","atom","key","default","commonInputStyle","css","selectStyle","addressInputStyle","Address","useRecoilState","method","setMethod","value","onChange","target","map","v","type","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAEaA,EAAoB,CAAE,MAAO,OAAQ,MAAO,QAAS,UAErDC,EAAmCC,eAAK,CACnDC,IAAK,cACLC,QAASJ,EAAQ,K,4kBCJnB,IAAMK,EAAmBC,YAAH,KAeTC,EAAcD,YAAH,IACpBD,GAKSG,EAAoBF,YAAH,IAC1BD,GCjBSI,EAAoB,WAAO,IAAD,EAETC,yBAAeT,GAFN,mBAE9BU,EAF8B,KAEtBC,EAFsB,KAQrC,OACE,0BACE,sBACEC,MAAOF,EACPG,SARe,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OACtBH,EAAUG,EAAOF,QAQbP,IAAKC,GAEHP,EAAQgB,KAAI,SAACC,EAAGd,GAAJ,OAAY,sBAAQU,MAAOI,EAAGd,IAAKA,GAAMc,OAEzD,qBACEC,KAAK,OACLZ,IAAKE,MCtBAW,EAAgB,kBAC3B,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6dcdaf70.chunk.js","sourcesContent":["import {atom, RecoilState} from \"recoil\";\n\nexport const methods: string[] = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];\n\nexport const methodState: RecoilState<string> = atom({\n  key: 'methodState',\n  default: methods[0]\n});","import { css } from \"@emotion/core\";\n\nconst commonInputStyle = css`\n  border: 1px solid #bbb;\n  background: #f5f5f5;\n  border-radius: 3px;\n  font-size: 13px;\n  height: 36px;\n  padding: 0 10px;\n  box-sizing: border-box;\n  \n  &:focus {\n    background: #fff;\n    outline: none;\n  }\n`;\n\nexport const selectStyle = css`\n  ${commonInputStyle}\n  border-radius: 3px 0 0 3px;\n  width: 100px;\n`;\n\nexport const addressInputStyle = css`\n  ${commonInputStyle}\n  border-radius: 0 3px 3px 0;\n  margin-left: -1px;\n  width: calc(100% - 100px);\n`;","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { methodState, methods } from \"../../stores/requestMethod\";\nimport { selectStyle, addressInputStyle } from \"./styles\";\n\nexport const Address: React.FC = () => {\n\n  const [method, setMethod] = useRecoilState(methodState);\n\n  const changeMethod = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMethod(target.value);\n  }\n\n  return (\n    <header>\n      <select\n        value={method}\n        onChange={changeMethod}\n        css={selectStyle}\n      >\n        { methods.map((v, key) => <option value={v} key={key}>{v}</option>) }\n      </select>\n      <input\n        type=\"text\"\n        css={addressInputStyle}\n      />\n    </header>\n  );\n}","import React from 'react';\nimport './App.scss';\nimport {Address} from \"../RequestContainer\";\n\nexport const App: React.FC = () => (\n  <div className=\"App\">\n    <Address />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport { RecoilRoot } from \"recoil\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <RecoilRoot>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}