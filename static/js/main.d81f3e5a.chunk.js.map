{"version":3,"sources":["components/AsideContainer/Histories.tsx","components/AsideContainer/AsideContainer.tsx","stores/requestStore/index.ts","components/FormContainer/RequestContainer/styles.ts","components/Layout/Buttons/DefaultButton.tsx","utils/index.ts","components/FormContainer/RequestContainer/RequestAddress.tsx","reset.style.ts","components/Layout/Forms/DefaultInput.tsx","components/FormContainer/RequestContainer/RequestTable.tsx","components/FormContainer/RequestContainer/RequestParams.tsx","components/FormContainer/RequestContainer/RequestHeaders.tsx","components/FormContainer/RequestContainer/RequestBody.tsx","components/FormContainer/RequestContainer/RequestConfig.tsx","components/Layout/Dialog/Dialog.tsx","components/Layout/Dialog/Alert.tsx","stores/responseStore/index.ts","components/FormContainer/RequestContainer/RequestContainer.tsx","components/FormContainer/ResponseContainer/styles.ts","components/FormContainer/ResponseContainer/ResponseContainer.tsx","components/FormContainer/FormContainer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["titleStyle","css","Histories","AsideContainer","className","methods","configTabs","methodState","atom","key","default","tabState","headersState","paramsState","addressStyle","commonInputStyle","selectStyle","addressInputStyle","buttonStyle","tabStyle","requestTableStyles","defaultButtonStyles","DefaultButton","overrideCss","props","extendedStyles","children","urlRule","validateURL","url","length","test","RequestAddress","submitRequest","useRecoilState","method","setMethod","useState","requestURL","setRequestURL","isDisabled","setDisabled","submit","value","onChange","target","map","v","type","onKeyDown","keyCode","onClick","disabled","listResetStyle","paragraphResetStyle","allResetStyle","DefaultInput","inputStyles","RequestTable","data","setData","changeDataOfIndex","property","index","e","newDataList","placeholder","RequestParams","RequestHeaders","RequestBody","RequestConfig","activeTab","setActiveTab","tabName","Dialog","width","onClose","dialogStyles","defaultDialogStyles","wrapperStyles","close","stopPropagation","closeButtonStyles","Alert","responseState","RequestContainer","alertMessage","setAlertMessage","setResponse","useSetRecoilState","params","useRecoilValue","headers","headerList","queryParams","filter","trim","includes","encodeURIComponent","join","getQueryParamsOf","axios","reduce","then","catch","console","error","response","responseContainerStyles","responseTitleStyles","noneBlockStyles","ResponseContainer","JSON","stringify","FormContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d81f3e5a.chunk.js","sourcesContent":["/** @jsx jsx */\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\n\nconst titleStyle = css`\n  border-bottom: 2px solid #06F;\n  padding: 15px;\n  margin: 0;\n  font-size: 21px;\n  font-weight: 400;\n`;\n\nexport const Histories: React.FC = () => (\n  <section>\n    <h2 css={titleStyle}>History</h2>\n  </section>\n);","import React from \"react\";\nimport { Histories } from \"./Histories\";\n\nexport const AsideContainer: React.FC = () => (\n  <aside className=\"asideContainer\">\n    <Histories />\n  </aside>\n);","import { atom, RecoilState } from \"recoil\";\nimport { Method } from \"axios\";\n\nexport interface IRequestTable {\n  key: string\n  value: string\n}\n\nexport const methods: Method[] = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];\nexport const configTabs: string[] = ['Params', 'Headers', 'Body'];\n\nexport const methodState: RecoilState<Method> = atom({\n  key: 'methodState',\n  default: methods[0]\n});\n\nexport const tabState: RecoilState<number> = atom({\n  key: 'tabState',\n  default: 0\n});\n\nconst headers: IRequestTable[] = [];\nexport const headersState: RecoilState<IRequestTable[]> = atom({\n  key: 'headersState',\n  default: headers\n});\n\nconst params: IRequestTable[] = [];\nexport const paramsState: RecoilState<IRequestTable[]> = atom({\n  key: 'paramsState',\n  default: params\n});","import { css } from \"@emotion/core\";\n\nexport const addressStyle = css`\n  padding: 10px;\n  border-bottom: 1px solid #ddd;\n  display: flex;\n`;\n\nconst commonInputStyle = css`\n  border: 1px solid #bbb;\n  background: #f5f5f5;\n  border-radius: 2px;\n  font-size: 13px;\n  height: 36px;\n  padding: 0 10px;\n  box-sizing: border-box;\n  transition: background-color 0.15s;\n  \n  &:focus {\n    background: #fff;\n    outline: none;\n  }\n`;\n\nexport const selectStyle = css`\n  ${commonInputStyle}\n  border-radius: 3px 0 0 3px;\n  width: 100px;\n`;\n\nexport const addressInputStyle = css`\n  ${commonInputStyle}\n  border-radius: 0 3px 3px 0;\n  margin-left: -1px;\n  width: calc(100% - 190px);\n`;\n\nexport const buttonStyle = css`\n  margin-left: 5px;\n  width: 85px;\n  font-weight: bold;\n  height: 36px;\n  padding: 0 10px;\n`;\n\nexport const tabStyle = css`\n  && {\n    display: flex;\n    border-bottom: 1px dotted #ddd;\n    padding: 0 10px;\n    \n    li {\n      padding: 15px 10px;\n      position: relative;\n      color: #aaa;\n      font-size: 13px;\n      cursor: pointer;\n      transition: color 0.3s;\n      \n      &::after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        left: 50%;\n        right: 50%;\n        height: 3px;\n        background: #06F;\n        bottom: -1px;\n        transition-property: left, right;\n        transition-duration: 0.3s;\n      }\n      \n      &:hover {\n        color: #000;\n      }\n      \n      &.active {\n        color: #000;\n        &::after {\n          left: 0;\n          right: 0;\n        }\n      }\n    }\n  }\n`;\n\nexport const requestTableStyles = css`\n  && {\n    padding: 20px;\n    \n    .noneData {\n      background: #f5f5f5;\n      border-radius: 3px;\n      border: 1px solid #ddd;\n      padding: 20px 0;\n      text-align: center;\n      color: #666;\n      font-size: 13px;\n    }\n    \n    ul {\n      max-width: 1000px;\n    }\n    \n    li {\n      margin-bottom: 5px;\n    }\n  }\n`;","/** @jsx jsx **/\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport { IButtonProps } from \"./index\";\n\nconst defaultButtonStyles = css`\n  border: none;\n  border-radius: 2px;\n  background-color: #09F;\n  color: #fff;\n  padding: 7px 10px;\n  transition-property: background-color, opacity;\n  transition-duration: 0.2s;\n  box-sizing: border-box;\n  \n  &:not(:disabled) {\n    &:hover,\n    &:focus {\n      background-color: #06F;\n      outline: none;\n    }\n  }\n  \n  &:disabled {\n    opacity: 0.5\n  }\n`;\n\nexport const DefaultButton: React.FC<IButtonProps> = ({ overrideCss, ...props }: IButtonProps) => {\n  const extendedStyles = css`\n    ${defaultButtonStyles}\n    ${overrideCss}\n  `;\n  return (\n    <button\n      { ...props }\n      css={extendedStyles}\n    >\n      {props.children}\n    </button>\n  );\n}","import { IRequestTable } from \"../stores/requestStore\";\n\nconst urlRule = /^https?:\\/\\/([a-zA-Z0-9가-힣._-]+\\.)?[a-zA-Z0-9]+(:[0-9]{2,5})?/\nexport const validateURL = (url: string) => {\n  return url.length > 0 && urlRule.test(url);\n}\n\nexport const getQueryParamsOf = (params: IRequestTable[]) => {\n  const queryParams = params.filter(({ key, value }) => ![key.trim(), value.trim()].includes(''))\n                            .map(({ key, value }) => `${key}=${encodeURIComponent(value)}`).join('&');\n\n  return queryParams.length ? `?${queryParams}` : '';\n}\n\nexport const getHeadersOf = (headerList: IRequestTable[]): { [k: string]: string } =>\n  headerList.filter(({ key, value }) => ![key.trim(), value.trim()].includes('') )\n            .reduce((headers, { key, value }) => ({\n              ...headers,\n              [key]: value\n            }), {});","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React, {useState} from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { methodState, methods } from \"stores/requestStore\";\nimport { selectStyle, addressInputStyle, addressStyle, buttonStyle } from \"./styles\";\nimport { DefaultButton } from \"components/Layout/Buttons\";\nimport { validateURL } from \"utils\";\nimport { Method } from \"axios\";\n\nexport interface IRequestAddressProps {\n  submitRequest: (requestURL: string) => void\n}\n\nexport const RequestAddress: React.FC<IRequestAddressProps> = ({ submitRequest }: IRequestAddressProps) => {\n\n  const [ method, setMethod ] = useRecoilState(methodState);\n  const [ requestURL, setRequestURL ] = useState('');\n  const [ isDisabled, setDisabled ] = useState(true);\n\n  const changeMethod = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMethod(target.value as Method);\n  }\n\n  const updateUrl = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    setRequestURL(target.value);\n    setDisabled(!validateURL(requestURL));\n  }\n\n  const submitOnEnter = ({ keyCode }: React.KeyboardEvent<HTMLInputElement>) => {\n    if (keyCode === 13) {\n      submit();\n    }\n  }\n\n  const submit = () => {\n    if (!validateURL(requestURL)) {\n      return setDisabled(true);\n    }\n    submitRequest(requestURL);\n  }\n\n  return (\n    <div css={addressStyle}>\n      <select\n        value={method}\n        onChange={changeMethod}\n        css={selectStyle}\n      >\n        { methods.map((v, key) =>\n          <option value={v} key={key}>{v}</option>)\n        }\n      </select>\n\n      <input\n        type=\"text\"\n        css={addressInputStyle}\n        onChange={updateUrl}\n        onKeyDown={submitOnEnter}\n      />\n\n      <DefaultButton\n        type=\"button\"\n        overrideCss={buttonStyle}\n        onClick={submit}\n        disabled={isDisabled}\n        children=\"Send\" />\n    </div>\n  );\n}","import { css } from \"@emotion/core\";\n\nexport const listResetStyle = css`\n  ul, li {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const paragraphResetStyle = css`\n  p {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const allResetStyle = css`\n  ${listResetStyle}\n  ${paragraphResetStyle}\n`;","/** @jsx jsx **/\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\nimport { IInputProps } from \"./index\";\n\nconst defaultInputStyles = `\n  padding: 10px;\n  background: #fff;\n  border-radius: 2px;\n  border: 1px solid #bbb;\n  font-size: 13px;\n  box-sizing: border-box;\n  \n  + input,\n  + button,\n  + select {\n    margin-left: 5px;\n  }\n  \n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const DefaultInput: React.FC<IInputProps> = ({ overrideCss, ...props }: IInputProps) => {\n  return (\n    <input\n      {...props}\n      css={css`\n        ${defaultInputStyles}\n        ${overrideCss}\n      `}\n    />\n  );\n}","/** @jsx jsx **/\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\nimport {IRequestTable} from \"stores/requestStore\";\nimport {SetterOrUpdater} from \"recoil\";\nimport {requestTableStyles} from './styles';\nimport {DefaultButton} from \"components/Layout/Buttons\";\nimport {DefaultInput} from \"../../Layout/Forms\";\n\ninterface RequestTableProps {\n  data: IRequestTable[],\n  setData: SetterOrUpdater<IRequestTable[]>\n}\n\nconst inputStyles = css`\n  width: calc(50% - 2.5px)  \n`;\n\nexport const RequestTable: React.FC<RequestTableProps> = ({ data, setData }: RequestTableProps) => {\n\n  const addData = () => setData([\n    ...data,\n    { key: '', value: '' }\n  ]);\n\n  const changeDataOfIndex = (property: string, index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newDataList: IRequestTable[] = [ ...data ];\n    newDataList[index] = {...newDataList[index], [property]: e.target.value};\n    setData(newDataList);\n  }\n\n  return (\n    <div css={requestTableStyles}>\n      { data.length !== 0 ?\n        <ul>\n          { data.map(({ key, value }, index) =>\n            <li key={index}>\n              <DefaultInput\n                type=\"text\"\n                value={key}\n                onChange={changeDataOfIndex('key', index)}\n                overrideCss={inputStyles}\n                placeholder=\"key\" />\n              <DefaultInput\n                type=\"text\"\n                value={value}\n                onChange={changeDataOfIndex('value', index)}\n                overrideCss={inputStyles}\n                placeholder=\"value\" />\n            </li>\n          ) }\n        </ul> :\n        <p className=\"noneData\">현재 등록된 파라미터가 없습니다.</p>\n      }\n      <div css={css`margin-top: 10px;`}>\n        <DefaultButton\n          type=\"button\"\n          onClick={addData}\n          children=\"추가\" />\n      </div>\n    </div>\n  )\n};","import React from \"react\";\nimport {RequestTable} from \"./RequestTable\";\nimport {useRecoilState} from \"recoil\";\nimport {paramsState} from \"stores/requestStore\";\n\nexport const RequestParams: React.FC = () => {\n  const [ data, setData ] = useRecoilState(paramsState);\n\n  return (\n    <article>\n      <RequestTable\n        data={data}\n        setData={setData} />\n    </article>\n  )\n};","import React from \"react\";\nimport { RequestTable } from \"./RequestTable\";\nimport { headersState } from \"stores/requestStore\";\nimport { useRecoilState } from \"recoil\";\n\nexport const RequestHeaders: React.FC = () => {\n  const [ data, setData ] = useRecoilState(headersState);\n\n  return (\n    <article>\n      <RequestTable\n        data={data}\n        setData={setData} />\n    </article>\n  )\n};","import React from \"react\";\n\nexport const RequestBody: React.FC = () => (\n  <article>\n  </article>\n);","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport { allResetStyle } from \"reset.style\";\nimport { tabStyle } from \"./styles\";\nimport { configTabs, tabState } from \"stores/requestStore\";\nimport { useRecoilState } from \"recoil\";\nimport { RequestParams } from \"./RequestParams\";\nimport { RequestHeaders } from \"./RequestHeaders\";\nimport { RequestBody } from \"./RequestBody\";\n\nexport const RequestConfig: React.FC = () => {\n\n  const [activeTab, setActiveTab] = useRecoilState(tabState);\n\n  return (\n    <div css={allResetStyle}>\n      <ul css={tabStyle}>\n        {configTabs.map((tabName, key) =>\n          <li\n            key={key}\n            className={key === activeTab ? 'active' : ''}\n            onClick={() => setActiveTab(key)}\n          >\n            {tabName}\n          </li>\n        )}\n      </ul>\n      {\n        activeTab === 0 ? <RequestParams /> :\n        activeTab === 1 ? <RequestHeaders /> :\n        activeTab === 2 ? <RequestBody /> :\n        ''\n      }\n    </div>\n  )\n}\n","/** @jsx jsx **/\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\nimport {IDialogProps} from \"./index\";\n\nexport const Dialog: React.FC<IDialogProps> = ({ children, overrideCss, width = 700, onClose }: IDialogProps) => {\n\n  const dialogStyles = css`\n    ${defaultDialogStyles}\n    ${overrideCss}\n  `;\n\n  const wrapperStyles = css`\n    width: ${width}px;\n  `;\n\n  const close = () => onClose();\n\n  return (\n    <div css={dialogStyles} onClick={close}>\n      <div css={wrapperStyles} onClick={e => e.stopPropagation()}>\n        <button css={closeButtonStyles} onClick={close}>×</button>\n        { children }\n      </div>\n    </div>\n  );\n\n}\n\nconst defaultDialogStyles = css`\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  background-color: rgba(0, 0, 0, 0.3);\n  z-index: 100;\n  cursor: pointer;\n  \n  > div {\n    background-color: #fff;\n    margin: 100px auto 0;\n    padding: 15px;\n    border-radius: 3px;\n    position: relative;\n    box-shadow: 0 0 10px rgba(0,0,0, 0.2);\n    cursor: default;\n  }\n`;\n\nconst closeButtonStyles = css`\n  position: absolute;\n  right: 0;\n  top: 0;\n  border: none;\n  cursor: pointer;\n  background-color: #666;\n  color: #fff;\n  width: 20px;\n  height: 20px;\n  border-radius: 3px;\n  transition: background-color 0.3s;\n  \n  &:hover, &:focus {\n    background-color: #000;\n    outline: none;\n  }\n`;","/** @jsx jsx **/\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\";\nimport { Dialog } from \"./Dialog\";\nimport {DefaultButton} from \"../Buttons\";\nimport {IAlertProps} from \"./index\";\n\nexport const Alert: React.FC<IAlertProps> = ({ children, onClose }: IAlertProps) => {\n  return (\n    <Dialog width={300} onClose={onClose}>\n      { children }\n      <div css={css`\n        margin-top: 10px;\n        text-align: right;\n      `}>\n        <DefaultButton onClick={() => onClose()}>\n          확인\n        </DefaultButton>\n      </div>\n    </Dialog>\n  );\n}","import {atom, RecoilState} from \"recoil\";\n\nexport const responseState: RecoilState<any> = atom({\n  key: 'responseState',\n  default: null\n})","/** @jsx jsx **/\nimport { css, jsx } from \"@emotion/core\";\nimport React, {useState} from \"react\";\nimport { RequestAddress } from \"./RequestAddress\";\nimport { RequestConfig } from \"./RequestConfig\";\nimport { Alert } from \"components/Layout/Dialog\";\nimport { getHeadersOf, getQueryParamsOf } from \"utils\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {headersState, methodState, paramsState} from \"stores/requestStore\";\nimport axios from 'axios';\nimport {responseState} from \"../../../stores/responseStore\";\n\nconst titleStyle = css`\n  font-size: 21px;\n  margin: 0;\n  padding: 15px;\n  font-weight: 400;\n`;\n\nexport const RequestContainer: React.FC = () => {\n\n  const [alertMessage, setAlertMessage] = useState('');\n  const setResponse = useSetRecoilState(responseState);\n\n  const params = useRecoilValue(paramsState);\n  const headers = useRecoilValue(headersState);\n  const method = useRecoilValue(methodState);\n\n  const submitRequest = (requestURL: string) => {\n    const url = `${requestURL}${getQueryParamsOf(params)}`;\n\n    axios({ url, method, headers: getHeadersOf(headers) })\n      .then(setResponse)\n      .catch(e => {\n        console.error(e.response);\n        setAlertMessage(`${e}`);\n      });\n  }\n\n  return (\n    <section>\n      <h2 css={titleStyle}>Request</h2>\n      <RequestAddress\n        submitRequest={submitRequest}\n      />\n      <RequestConfig/>\n      { alertMessage.length > 0 &&\n        <Alert onClose={() => setAlertMessage('')}>\n          { alertMessage }\n        </Alert>\n      }\n    </section>\n  );\n};","import {css} from \"@emotion/core\";\n\nexport const responseContainerStyles = css`\n  border-top: 1px solid #ddd;\n  overflow: auto;\n`;\n\nexport const responseTitleStyles = css`\n  font-size: 21px;\n  margin: 0;\n  padding: 15px;\n  font-weight: 400;\n`;\n\nexport const noneBlockStyles = css`\n  margin: 0 15px 15px;\n  background: #f5f5f5;\n  padding: 20px;\n  text-align: center;\n  color: #666;\n  border-radius: 3px;\n  border: 1px solid #ddd;\n  font-size: 13px;\n`;","/** @jsx jsx **/\nimport { jsx } from '@emotion/core';\nimport React from \"react\";\nimport { responseContainerStyles, responseTitleStyles, noneBlockStyles } from \"./styles\";\nimport { useRecoilValue } from \"recoil\";\nimport { responseState } from \"stores/responseStore\";\nimport Highlight from \"react-highlight\";\n\nexport const ResponseContainer: React.FC = () => {\n\n  const response = useRecoilValue(responseState);\n\n  return (\n    <section css={responseContainerStyles}>\n      <h2 css={responseTitleStyles}>Response</h2>\n      {\n        response !== null ?\n          <Highlight>\n            { JSON.stringify(response.data, null, 4) }\n          </Highlight> :\n          <p css={noneBlockStyles}>아직 Request를 보내지 않았습니다.</p>\n      }\n    </section>\n  );\n}\n","import React from \"react\";\nimport {RequestContainer} from \"./RequestContainer\";\nimport {ResponseContainer} from \"./ResponseContainer\";\n\nexport const FormContainer: React.FC = () => {\n\n  return (\n    <section className=\"formContainer\">\n      <RequestContainer />\n      <ResponseContainer />\n    </section>\n  )\n};","import React from 'react';\nimport { AsideContainer } from '../AsideContainer';\nimport { FormContainer } from '../FormContainer';\n\nexport const App: React.FC = () => (\n  <div className=\"App\">\n    <AsideContainer />\n    <FormContainer />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport { RecoilRoot } from \"recoil\";\nimport * as serviceWorker from './serviceWorker';\nimport 'highlight.js/styles/default.css';\n\nReactDOM.render(\n  <RecoilRoot>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}