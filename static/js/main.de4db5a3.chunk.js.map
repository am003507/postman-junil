{"version":3,"sources":["components/AsideContainer/Histories.tsx","components/AsideContainer/AsideContainer.tsx","stores/requestStore/index.ts","components/FormContainer/RequestContainer/styles.ts","components/Layout/Buttons/DefaultButton.tsx","utils/index.ts","components/FormContainer/RequestContainer/RequestAddress.tsx","reset.style.ts","components/Layout/Forms/DefaultInput.tsx","components/FormContainer/RequestContainer/RequestTable.tsx","components/FormContainer/RequestContainer/RequestParams.tsx","components/FormContainer/RequestContainer/RequestHeaders.tsx","components/FormContainer/RequestContainer/RequestBody.tsx","components/FormContainer/RequestContainer/RequestConfig.tsx","components/FormContainer/RequestContainer/RequestContainer.tsx","components/FormContainer/FormContainer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["titleStyle","css","Histories","AsideContainer","className","methods","configTabs","methodState","atom","key","default","tabState","headersState","paramsState","addressStyle","commonInputStyle","selectStyle","addressInputStyle","buttonStyle","tabStyle","requestTableStyles","defaultButtonStyles","DefaultButton","overrideCss","props","extendedStyles","children","urlRule","validateURL","url","length","test","RequestAddress","useRecoilState","method","setMethod","params","useRecoilValue","headers","useState","requestURL","setRequestURL","isDisabled","setDisabled","submitRequest","headerList","queryParams","filter","value","trim","includes","map","encodeURIComponent","join","getQueryParamsOf","fetch","reduce","then","res","text","console","log","catch","error","onChange","target","v","type","onKeyDown","keyCode","onClick","disabled","listResetStyle","paragraphResetStyle","allResetStyle","DefaultInput","inputStyles","RequestTable","data","setData","changeDataOfIndex","property","index","e","newDataList","placeholder","RequestParams","RequestHeaders","RequestBody","RequestConfig","activeTab","setActiveTab","tabName","RequestContainer","FormContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.de4db5a3.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport {css, jsx} from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nconst titleStyle = css`\r\n  border-bottom: 2px solid #06F;\r\n  padding: 15px;\r\n  margin: 0;\r\n  font-size: 21px;\r\n  font-weight: 400;\r\n`;\r\n\r\nexport const Histories: React.FC = () => (\r\n  <section>\r\n    <h2 css={titleStyle}>History</h2>\r\n  </section>\r\n);","import React from \"react\";\r\nimport { Histories } from \"./Histories\";\r\n\r\nexport const AsideContainer: React.FC = () => (\r\n  <aside className=\"asideContainer\">\r\n    <Histories />\r\n  </aside>\r\n);","import { atom, RecoilState } from \"recoil\";\r\n\r\nexport interface IRequestTable {\r\n  key: string\r\n  value: string\r\n}\r\n\r\nexport const methods: string[] = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];\r\nexport const configTabs: string[] = ['Params', 'Headers', 'Body'];\r\n\r\nexport const methodState: RecoilState<string> = atom({\r\n  key: 'methodState',\r\n  default: methods[0]\r\n});\r\n\r\nexport const tabState: RecoilState<number> = atom({\r\n  key: 'tabState',\r\n  default: 0\r\n});\r\n\r\nconst headers: IRequestTable[] = [];\r\nexport const headersState: RecoilState<IRequestTable[]> = atom({\r\n  key: 'headersState',\r\n  default: headers\r\n});\r\n\r\nconst params: IRequestTable[] = [];\r\nexport const paramsState: RecoilState<IRequestTable[]> = atom({\r\n  key: 'paramsState',\r\n  default: params\r\n});","import { css } from \"@emotion/core\";\r\n\r\nexport const addressStyle = css`\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n`;\r\n\r\nconst commonInputStyle = css`\r\n  border: 1px solid #bbb;\r\n  background: #f5f5f5;\r\n  border-radius: 2px;\r\n  font-size: 13px;\r\n  height: 36px;\r\n  padding: 0 10px;\r\n  box-sizing: border-box;\r\n  transition: background-color 0.15s;\r\n  \r\n  &:focus {\r\n    background: #fff;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const selectStyle = css`\r\n  ${commonInputStyle}\r\n  border-radius: 3px 0 0 3px;\r\n  width: 100px;\r\n`;\r\n\r\nexport const addressInputStyle = css`\r\n  ${commonInputStyle}\r\n  border-radius: 0 3px 3px 0;\r\n  margin-left: -1px;\r\n  width: calc(100% - 190px);\r\n`;\r\n\r\nexport const buttonStyle = css`\r\n  margin-left: 5px;\r\n  width: 85px;\r\n  font-weight: bold;\r\n  height: 36px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const tabStyle = css`\r\n  && {\r\n    display: flex;\r\n    border-bottom: 1px dotted #ddd;\r\n    padding: 0 10px;\r\n    \r\n    li {\r\n      padding: 15px 10px;\r\n      position: relative;\r\n      color: #aaa;\r\n      font-size: 13px;\r\n      cursor: pointer;\r\n      transition: color 0.3s;\r\n      \r\n      &::after {\r\n        content: \"\";\r\n        display: block;\r\n        position: absolute;\r\n        left: 50%;\r\n        right: 50%;\r\n        height: 3px;\r\n        background: #06F;\r\n        bottom: -1px;\r\n        transition-property: left, right;\r\n        transition-duration: 0.3s;\r\n      }\r\n      \r\n      &:hover {\r\n        color: #000;\r\n      }\r\n      \r\n      &.active {\r\n        color: #000;\r\n        &::after {\r\n          left: 0;\r\n          right: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const requestTableStyles = css`\r\n  && {\r\n    padding: 20px;\r\n    \r\n    .noneData {\r\n      background: #f5f5f5;\r\n      border-radius: 3px;\r\n      border: 1px solid #ddd;\r\n      padding: 20px 0;\r\n      text-align: center;\r\n      color: #666;\r\n      font-size: 13px;\r\n    }\r\n    \r\n    ul {\r\n      max-width: 1000px;\r\n    }\r\n    \r\n    li {\r\n      margin-bottom: 5px;\r\n    }\r\n  }\r\n`;","/** @jsx jsx **/\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { IButtonProps } from \"./index\";\r\n\r\nconst defaultButtonStyles = css`\r\n  border: none;\r\n  border-radius: 2px;\r\n  background-color: #09F;\r\n  color: #fff;\r\n  padding: 7px 10px;\r\n  transition-property: background-color, opacity;\r\n  transition-duration: 0.2s;\r\n  box-sizing: border-box;\r\n  \r\n  &:not(:disabled) {\r\n    &:hover,\r\n    &:focus {\r\n      background-color: #06F;\r\n      outline: none;\r\n    }\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.5\r\n  }\r\n`;\r\n\r\nexport const DefaultButton: React.FC<IButtonProps> = ({ overrideCss, ...props }: IButtonProps) => {\r\n  const extendedStyles = css`\r\n    ${defaultButtonStyles}\r\n    ${overrideCss}\r\n  `;\r\n  return (\r\n    <button\r\n      { ...props }\r\n      css={extendedStyles}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n}","import { IRequestTable } from \"../stores/requestStore\";\r\n\r\nconst urlRule = /^https?:\\/\\/([a-zA-Z0-9가-힣._-]+\\.)?[a-zA-Z0-9]+(:[0-9]{2,5})?$/\r\nexport const validateURL = (url: string) => {\r\n  return url.length > 0 && urlRule.test(url);\r\n}\r\n\r\nexport const getQueryParamsOf = (params: IRequestTable[]) => {\r\n  const queryParams = params.filter(({ key, value }) => ![key.trim(), value.trim()].includes(''))\r\n                            .map(({ key, value }) => `${key}=${encodeURIComponent(value)}`).join('&');\r\n\r\n  return queryParams.length ? `?${queryParams}` : '';\r\n}\r\n\r\nexport const getHeadersOf = (headerList: IRequestTable[]): { [k: string]: string } =>\r\n  headerList.filter(({ key, value }) => ![key.trim(), value.trim()].includes('') )\r\n            .reduce((headers, { key, value }) => ({\r\n              ...headers,\r\n              [key]: value\r\n            }), {});","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, {useState} from \"react\";\r\nimport {useRecoilState, useRecoilValue} from \"recoil\";\r\nimport {methodState, methods, paramsState, headersState} from \"stores/requestStore\";\r\nimport { selectStyle, addressInputStyle, addressStyle, buttonStyle } from \"./styles\";\r\nimport { DefaultButton } from \"components/Layout/Buttons\";\r\nimport { validateURL, getQueryParamsOf, getHeadersOf } from \"utils\";\r\n\r\nexport const RequestAddress: React.FC = () => {\r\n\r\n  const [ method, setMethod ] = useRecoilState(methodState);\r\n  const params = useRecoilValue(paramsState);\r\n  const headers = useRecoilValue(headersState);\r\n  const [ requestURL, setRequestURL ] = useState('');\r\n  const [ isDisabled, setDisabled ] = useState(true);\r\n\r\n  const changeMethod = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setMethod(target.value);\r\n  }\r\n\r\n  const updateUrl = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRequestURL(target.value);\r\n    setDisabled(!validateURL(requestURL));\r\n  }\r\n\r\n  const submitOnEnter = ({ keyCode }: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (keyCode === 13) {\r\n      submitRequest();\r\n    }\r\n  }\r\n\r\n  const submitRequest = () => {\r\n    if (!validateURL(requestURL)) {\r\n      return setDisabled(true);\r\n    }\r\n    const url = `${requestURL}${getQueryParamsOf(params)}`;\r\n\r\n    fetch(url, { headers: getHeadersOf(headers) })\r\n      .then(res => res.text())\r\n      .then(console.log)\r\n      .catch(console.error);\r\n  }\r\n\r\n  return (\r\n    <div css={addressStyle}>\r\n      <select\r\n        value={method}\r\n        onChange={changeMethod}\r\n        css={selectStyle}\r\n      >\r\n        { methods.map((v, key) =>\r\n          <option value={v} key={key}>{v}</option>)\r\n        }\r\n      </select>\r\n\r\n      <input\r\n        type=\"text\"\r\n        css={addressInputStyle}\r\n        onChange={updateUrl}\r\n        onKeyDown={submitOnEnter}\r\n      />\r\n\r\n      <DefaultButton\r\n        type=\"button\"\r\n        overrideCss={buttonStyle}\r\n        onClick={submitRequest}\r\n        disabled={isDisabled}\r\n        children=\"Send\" />\r\n    </div>\r\n  );\r\n}","import { css } from \"@emotion/core\";\r\n\r\nexport const listResetStyle = css`\r\n  ul, li {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const paragraphResetStyle = css`\r\n  p {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const allResetStyle = css`\r\n  ${listResetStyle}\r\n  ${paragraphResetStyle}\r\n`;","/** @jsx jsx **/\r\nimport {css, jsx} from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { IInputProps } from \"./index\";\r\n\r\nconst defaultInputStyles = `\r\n  padding: 10px;\r\n  background: #fff;\r\n  border-radius: 2px;\r\n  border: 1px solid #bbb;\r\n  font-size: 13px;\r\n  box-sizing: border-box;\r\n  \r\n  + input,\r\n  + button,\r\n  + select {\r\n    margin-left: 5px;\r\n  }\r\n  \r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const DefaultInput: React.FC<IInputProps> = ({ overrideCss, ...props }: IInputProps) => {\r\n  return (\r\n    <input\r\n      {...props}\r\n      css={css`\r\n        ${defaultInputStyles}\r\n        ${overrideCss}\r\n      `}\r\n    />\r\n  );\r\n}","/** @jsx jsx **/\r\nimport {css, jsx} from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport {IRequestTable} from \"stores/requestStore\";\r\nimport {SetterOrUpdater} from \"recoil\";\r\nimport {requestTableStyles} from './styles';\r\nimport {DefaultButton} from \"components/Layout/Buttons\";\r\nimport {DefaultInput} from \"../../Layout/Forms\";\r\n\r\ninterface RequestTableProps {\r\n  data: IRequestTable[],\r\n  setData: SetterOrUpdater<IRequestTable[]>\r\n}\r\n\r\nconst inputStyles = css`\r\n  width: calc(50% - 2.5px)  \r\n`;\r\n\r\nexport const RequestTable: React.FC<RequestTableProps> = ({ data, setData }: RequestTableProps) => {\r\n\r\n  const addData = () => setData([\r\n    ...data,\r\n    { key: '', value: '' }\r\n  ]);\r\n\r\n  const changeDataOfIndex = (property: string, index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newDataList: IRequestTable[] = [ ...data ];\r\n    newDataList[index] = {...newDataList[index], [property]: e.target.value};\r\n    setData(newDataList);\r\n  }\r\n\r\n  return (\r\n    <div css={requestTableStyles}>\r\n      { data.length !== 0 ?\r\n        <ul>\r\n          { data.map(({ key, value }, index) =>\r\n            <li key={index}>\r\n              <DefaultInput\r\n                type=\"text\"\r\n                value={key}\r\n                onChange={changeDataOfIndex('key', index)}\r\n                overrideCss={inputStyles}\r\n                placeholder=\"key\" />\r\n              <DefaultInput\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={changeDataOfIndex('value', index)}\r\n                overrideCss={inputStyles}\r\n                placeholder=\"value\" />\r\n            </li>\r\n          ) }\r\n        </ul> :\r\n        <p className=\"noneData\">현재 등록된 파라미터가 없습니다.</p>\r\n      }\r\n      <div css={css`margin-top: 10px;`}>\r\n        <DefaultButton\r\n          type=\"button\"\r\n          onClick={addData}\r\n          children=\"추가\" />\r\n      </div>\r\n    </div>\r\n  )\r\n};","import React from \"react\";\r\nimport {RequestTable} from \"./RequestTable\";\r\nimport {useRecoilState} from \"recoil\";\r\nimport {paramsState} from \"stores/requestStore\";\r\n\r\nexport const RequestParams: React.FC = () => {\r\n  const [ data, setData ] = useRecoilState(paramsState);\r\n\r\n  return (\r\n    <article>\r\n      <RequestTable\r\n        data={data}\r\n        setData={setData} />\r\n    </article>\r\n  )\r\n};","import React from \"react\";\r\nimport { RequestTable } from \"./RequestTable\";\r\nimport { headersState } from \"stores/requestStore\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nexport const RequestHeaders: React.FC = () => {\r\n  const [ data, setData ] = useRecoilState(headersState);\r\n\r\n  return (\r\n    <article>\r\n      <RequestTable\r\n        data={data}\r\n        setData={setData} />\r\n    </article>\r\n  )\r\n};","import React from \"react\";\r\n\r\nexport const RequestBody: React.FC = () => (\r\n  <article>\r\n  </article>\r\n);","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { allResetStyle } from \"reset.style\";\r\nimport { tabStyle } from \"./styles\";\r\nimport { configTabs, tabState } from \"stores/requestStore\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { RequestParams } from \"./RequestParams\";\r\nimport { RequestHeaders } from \"./RequestHeaders\";\r\nimport { RequestBody } from \"./RequestBody\";\r\n\r\nexport const RequestConfig: React.FC = () => {\r\n\r\n  const [activeTab, setActiveTab] = useRecoilState(tabState);\r\n\r\n  return (\r\n    <div css={allResetStyle}>\r\n      <ul css={tabStyle}>\r\n        {configTabs.map((tabName, key) =>\r\n          <li\r\n            key={key}\r\n            className={key === activeTab ? 'active' : ''}\r\n            onClick={() => setActiveTab(key)}\r\n          >\r\n            {tabName}\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {\r\n        activeTab === 0 ? <RequestParams /> :\r\n        activeTab === 1 ? <RequestHeaders /> :\r\n        activeTab === 2 ? <RequestBody /> :\r\n        ''\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","/** @jsx jsx **/\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { RequestAddress } from \"./RequestAddress\";\r\nimport { RequestConfig } from \"./RequestConfig\";\r\n\r\nconst titleStyle = css`\r\n  font-size: 21px;\r\n  margin: 0;\r\n  padding: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nexport const RequestContainer: React.FC = () => (\r\n  <section>\r\n    <h3 css={titleStyle}>Request</h3>\r\n    <RequestAddress />\r\n    <RequestConfig />\r\n  </section>\r\n);","import React from \"react\";\r\nimport {RequestContainer} from \"./RequestContainer\";\r\n\r\nexport const FormContainer: React.FC = () => (\r\n  <section className=\"formContainer\">\r\n    <RequestContainer />\r\n  </section>\r\n);","import React from 'react';\r\nimport { AsideContainer } from '../AsideContainer';\r\nimport { FormContainer } from '../FormContainer';\r\n\r\nexport const App: React.FC = () => (\r\n  <div className=\"App\">\r\n    <AsideContainer />\r\n    <FormContainer />\r\n  </div>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { App } from './components/App';\r\nimport { RecoilRoot } from \"recoil\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <RecoilRoot>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </RecoilRoot>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}